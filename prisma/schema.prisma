generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Company {
  id           String   @id @default(uuid())
  name         String   @unique
  invoice_date DateTime
  phone        String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  comment      String?

  cards Card[]
}

model Card {
  id               String    @id @default(uuid())
  number           String    @unique
  price_before_vat Decimal   @default(0)
  price_after_vat  Decimal   @default(0)
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  comment          String?
  last_invoiced    DateTime?

  company_id  String
  company     Company?  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  customer_id String?
  customer    Customer? @relation(fields: [customer_id], references: [id])

  invoices Invoice[]

  @@index([company_id])
  @@index([customer_id])
  @@index([number])
}

model Customer {
  id          String   @id @default(uuid())
  national_id String   @unique
  fullname    String
  grand_name  String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  comment     String?

  card         Card[]
  invoices     Invoice[]
  extraInvoice ExtraInvoice[]

  @@index([national_id])
}

enum InvoiceType {
  PENDING
  PAID
}

model ExtraInvoice {
  id           String      @id @default(uuid())
  amount       Decimal     @default(0)
  invoice_date DateTime
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  comment      String?
  type         InvoiceType @default(PENDING)

  customer_id String
  customer    Customer @relation(fields: [customer_id], references: [id])

  @@index([customer_id])
  @@index([invoice_date])
}

model Invoice {
  id           String      @id @default(uuid())
  amount       Decimal     @default(0)
  invoice_date DateTime
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  comment      String?
  type         InvoiceType @default(PENDING)

  customer_id String?
  customer    Customer? @relation(fields: [customer_id], references: [id])
  card_id     String?
  card        Card?     @relation(fields: [card_id], references: [id])

  @@unique([card_id, invoice_date])
  @@index([customer_id])
  @@index([card_id])
  @@index([invoice_date])
}
